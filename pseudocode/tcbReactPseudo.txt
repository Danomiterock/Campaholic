Keeping log of my contributions -TCB

1. Connecting to the Recreation API & Campaholic DB

Day Two

Issues so far:

Get request sends to Recreation API, returns 404 because header rejects CORS.
MongoDB is most likely the cause of this problem. The proxy already routes to the 
campaholic db through mongoose and package.json. Read some docs on NPM
about using the require('cors') middleware and passing options through the header.
Both attempts do not work when request tries to return an array of JSON objects
with data. I am going to look at my old fetch methods from Project Five and try to 
find a working key in the header that will allow HTTPS access to the API.

Posts will need to collect user information from a form & inputs. We have done this
multiple times in class whether it be a search or posting of content. This is when
we began to use state and **State functions. I struggled with that portion 
when I did the Google Books API project, worse case scenario the file jury rigs a function to 
collect html element data and send it over to the posts section of the site.

Experimenting with development of a Posts component. This component would allow us
to worry less about writing different logic for both pages. The Posts component would
take the input from the user in a <form> element and send the raw data to a user's personal feed
and the home page, where other users observe the community's posts. A post would render under
a user's feed on their own profile page and send the exact same data to render another post 
on the home page. Transferring the data may require some exporting of variables to the Home page,
which then renders a post containing that information, but how do we differentiate the incoming
data between users? If the same function is running on multiple computers rendering multiple
users' profile pages, does the server know to deliver individual user profile data without a database?

Now here's where we introduce the database. When a user sends 
a POST request to the database with the form's raw data, the Profile 
page & the Home page would be able to send GET requests and render the Post data.
It would make sense to use this method because mongoDB would 
assign each transaction with the user's username. If we utilize the mongoDB database, 
the home page will send a GET request to the database and display all the database's posts
( I will have to set a limit once we are dealing with larger data sets).
I will use the Trip.js model to store and render this data. So, the home page
will run a findAll function in the API.js utility and display the Trip.js table
data. I will have a talk with the team about repurposing the TripSchema keys because
I think we may be perceiving different approaches towards data collection.
If I am correct, the Trip model should collect a user's Post data.
Although there is differences in thought I am grateful that Wes came up
with a model and seed in case this API routing doesn't work. Saves my hide.

Writing a schema for the post model will look like this.

========================================
Mongoose
========================================

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const PostSchema = new Schema({

    username: {
        type: String,
        required: true
    },
    date: {
        type: Date,
        default: Date.now()
    },
    location: {
        type: String,
        required: true
    },
    description: {
        type: String
    },
    activities: {
        type: [String]
    },
    friends: {
        type: [String]
    }
});

const Post = mongoose.model("post", PostSchema);

module.exports = Post;

This model will structure data, which will be sent and received
using a findAll & create function in the API utility. 
Remember to import the API utility on the Home page.
Remember to import the API utility on the Profile page.
If the team wants the Post interface on the Home page, this will be
an easy fix.

========================================
Seeding the DB
========================================
const mongoose = require("mongoose");
const db = require("../models");

// This file empties the Posts collection and inserts the posts below

mongoose.connect(
  process.env.MONGODB_URI ||
  "mongodb://localhost/campaholicdb"
);

const PostSeed = [{
    username: "Triston Burns",
    location: "Picacho Peak",
    description: "Hiking on the Picacho Peak Trail!",
    activities: ["Hiking", "Camping"],
    friends: ["Bill", "Ted"]
}]


db.Post
  .remove({})
  .then(() => db.Post.collection.insertMany(PostSeed))
  .then(data => {
    console.log(data.result.n + " records inserted!");
    process.exit(0);
  })
  .catch(err => {
    console.error(err);
    process.exit(1);
  });

========================================
Post Controllers
========================================

const db = require("../models");

// Defining methods for the postsController
// Passing empty object will return all documents
// In the Posts collection

module.exports = {
  findAll: function(req, res) {
    db.Post
      .find({})
      .then(dbModel => res.json(dbModel))
      .catch(err => res.status(422).json(err));
  },
}

========================================
Routes 
========================================

const router = require("express").Router();
const postsController = require("../../controllers/postsController");

// Matches with "/api/books"
router.route("/")
  .get(postsController.findAll);

index.js
router.use("/posts", postRoutes);

========================================
Clientside API Routing
========================================

import axios from "axios";

export default {

  // Gets all posts
  getPosts: function () {
    return axios.get("/api/posts");
  }
}

Components & Pages

========================================
Creating & modifying components
========================================

========================================
Header Component
========================================

import React from "react";

export function Header() {
  return (
    <header className="masthead">
        <div className="headnav">
            <h1> Campaholic </h1>
            <Navbar />
        </div>
    </header>
  );
}

export default Header;


========================================
Jumbotron Component
========================================

import React from "react";

function Jumbotron() {
  return (
    <section className="jumbotron">
        <div>
            <h1>Nature is calling</h1>
            <p>Find your next adventure.</p>
        </div>
    </section>
  );
}

export default Jumbotron;

========================================
Posts Component
========================================

import React, { useState, useEffect } from "react";
import API from "../utils/API";

// Trying to think of a way to setup the component
// to only render the user's own posts to their profile page
// Using a conditional like if(username === "username"){etc.}
// Would become a major security issue if someone could manipulate
// the logic to display a differnt user's posts on their page.
// This means that the best route to take is a comparison of unique
// identifiers.
// Right now will work on getting the home page done so I have material

function Posts() {

    // Setup our post's state
    const [post, setPost] = useState([])
    const [formObject, setFormObject] = useState({})

    // Load all books and store them with setBooks
  useEffect(() => {
    loadBooks()
  }, [])

  // Loads all posts and sets them to posts
  function loadPosts() {
    API.getPosts()
      .then(res => 
        setPosts(res.data)
      )
      .catch(err => console.log(err));
  };

  return (
    <section className="posts">

    <h2>Feed</h2>

            {posts.map(post => (
            <article className="postcard" key={post._id}>
                <div className="postheading">
                <p>{post.username}</p>
                <p>Posted: {post.date}</p>
                </div>
                <div className="postmain">
                <img src="https://images.unsplash.com/photo-1590990771866-c172665b47ce?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1567&q=80 alt="location">
                <p className="location">{post.location}</p>
                <p className="description">{post.description}</p>
                </div>
                <div className="submain">
                <p className="activities">Activities: </p>
                <ul>
                <li>{post.activities}</li> 
                </ul>
                <p className="friends">{post.username} is with:</p>
                <ul className="friendlist">
                <li>{post.friends}</li>
                </ul>
                </div>
            </article>
                ))}

    </section>
  );
}

export default Posts;

========================================
Footer Component
========================================
import React from 'react';

function Footer(){
    return (
        <footer className="footer">
        <p> Campaholic &copy 2021</p>
        </footer>
    )
}

export default Footer();

========================================
Completed Pages: About, LoginSignup, Profile, Search.
ToDo Pages: Home, App.
========================================

========================================
Home Page
========================================

import React from "react";
import { Container } from "react-bootstrap";
import Header from "./components/Header";
import Navbar from "./components/Navbar";
import Jumbotron from "./components/Jumobtron";
import Posts from "./components/Posts";
import Footer from "./components/Footer";


export const Home = () => {
  return (
    <Container>
       <div>
       <Header />
       <Navbar />
       <Jumbotron />
       <Posts />
       <Footer />
      </div>
    </Container>
  );
};

export default Home;

Day Four

2. Developing Home page & Search page styles

Worked on the CSS for the home page last night.
Without the styles, the page will send the GET request
and display the single record of data in our Post collection
to the Posts component in our React app. When I style the
header & nav so far the server cannot connect to the localhost db
for some reason. Will have to look through the code and see if the API routes
are messing up because of the front end page's code. Shouldn't be the issue
but deducing where the bug occurs is key to fixing the problem.

Issues: 

Team mentioning the need to relate users to posts. Talked about using unique identifiers
for posts and users since mongoDB assigns _id keys but not necessarily unique to a user.
I.e. if a user has an _id key of 1 and we use logic to render posts based on that key,
React would only render a post with the same key. This is a problem because a user could
have an _id key of 5 while a user with and _id of 3 sends a post that creates an _id of 5.
To fix this, I suggested we use foreign keys. We will have to research docs on how to
setup the keys. Slight concerns about whether we are using the right database structure
for our data. We will have to start implementing relational logic, which is the kind of
database that mongoDB attempts to avoid. There is a method for looking at foreign keys on a given
record, which means mongoDB must allow for the creation of "relational" data. Will look into
structuring a model to have documents contain foreign keys later.

========================================
Styles
========================================
For Home page

/* * {
    font-family: sans-serif;
} */

#root {
  display: flex;
}

.masthead {
  display: -webkit-flex;
  display: flex;
  -webkit-justify-content: space-around;
  justify-content: space-around;
  position: fixed;
  background-color: #fff;
  width: 100%;
  height: 200px;
  -webkit-align-items: center;
  align-items: center;
  background-repeat: no-repeat;
  z-index: 1;
}

.headnav {
  display: -webkit-flex;
  display: flex;
  -webkit-flex-direction: column;
  flex-direction: column;
  position: fixed;
  width: 100%;
}

.header {
  display: -webkit-flex;
  display: flex;
  -webkit-flex-direction: row;
  flex-direction: row;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  color: #779c7a;
  padding-top: 2em;
  padding-left: 1em;
  background-color: #f2f2f2;
}

.header h1 {
  font-family: "Kadwa", 'sans-serif';
  font-size: 3rem;
  padding: 10px;
}

.header a {
  font-family: "Karla", sans-serif;
  font-size: 2rem;
  padding: 15px;
  text-decoration: none;
  color: #779c7a;
}

.navbar {
  position: relative;
  display: -ms-flexbox;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-around;
  padding: 0.5rem 1rem;
}

.navbar-nav {
  display: -ms-flexbox;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-left: 0;
  margin-bottom: 0;
  list-style: none;
  /* background-image: url("https://images.unsplash.com/photo-1606335270813-52d62bfc5e69?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2777&q=80"); */
  /* background-color: rgba(235, 236, 235, 0.7); */
  width: 100%;
}

.navbar-nav a {
  color: #395213;
  text-decoration: none;
  font-size: 2rem;
  opacity: 1;
}

.content {
  padding-top: 200px;
}

.jumbotron {
  background-color: #eee;
  background-image: url("https://images.unsplash.com/photo-1447752875215-b2761acb3c5d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1366&h=700&q=80");
  height: 700px;
  text-align: center;
  z-index: 0;
  margin: 0px;
  border-radius: 0px;
}

.jumbotron div {
  background-color: #293b0d;
  color: #f2f2f2;
  /* text-align: center; */
  position: relative;
  top: 1em;
  font-size: 4rem;
  border-radius: 10px;
  opacity: 0.9;
  /* margin: 0px; */
  /* width: 50%; */
  padding: 30px;
  width: auto;
  margin: 250px;
  margin-top: 0;
  font-family: "Kadwa";
  /* margin-bottom: 400px; */
  /* z-index: 0; */
}

.jumbotron div h1 {
  font-family: "Kadwa";
}

.posts {
  background-color: #f2ddb6;
  font-family: sans-serif;
  padding: 50px;
}

.posts h2 {
  background-color: #395213;
  width: 15%;
  text-align: center;
  color: #f2f2f2;
  border-radius: 20px;
}

.posts img {
  width: 30%;
}

.postcard {
  /* padding: 100px; */
  background-color: #f2f2f2;
  border-radius: 70px;
  margin: 0;
  font-family: sans-serif;
  /* margin-top: 0px; */
}

.postheading {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  background-color: #5d3715;
  font-size: 2rem;
  color: #f2f2f2;
  font-family: sans-serif;
  border-top-right-radius: 100px;
  border-top-left-radius: 100px;
}

.postmain {
  flex-direction: row;
  display: flex;
  justify-content: space-around;
  padding: 50px;
}

.postmain img {
  border: 10px solid #5d3715;
  border-radius: 5px;
}

.submain {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}

.footer {
  text-align: center;
  color: #f2f2f2;
  background-color: #5d3715;
  padding: 1px;
}


Components & Pages 
========================================
Header
========================================

import React from "react";
import { Link } from "react-router-dom";
import NavList from "../NavList";

export function Header() {
  return (
    <div className="header">
      {/* <img src="https://images.unsplash.com/photo-1552083375-1447ce886485?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80" 
      alt="header"
      className="headerimg"
      /> */}
      <h1> Campaholic </h1>
      <Link to="/Login">Login</Link>
      <Link to="/Login">Sign Up</Link>
    </div>
  );
}

export default Header;

========================================
NavList
========================================

import React from "react";
import { BrowserRouter as useLocation } from "react-router-dom";
import { Navbar, Nav, Form, FormControl, Button } from "react-bootstrap";
// import "../index.css"

function NavList() {
  // const location = useLocation();

  return (
    <>
      <Navbar className="navbar">
        <Nav>
          <Nav.Link href="/">
            <p>Home</p>
          </Nav.Link>
          <Nav.Link href="search">
            <p>Search</p>
          </Nav.Link>
          <Nav.Link href="aboutme">
            <p>About</p>
          </Nav.Link>
          <Nav.Link href="contact">
            <p>Profile</p>
          </Nav.Link>
        </Nav>
        {
        /* Commenting this out because I believe
        We want to have the Search bar on a different page 
        <Form inline>
          <FormControl type="text" placeholder="Search" className="mr-sm-2" />
          <Button className="primaryColor" variant="outline-info">
            Search
          </Button>
        </Form> */}
      </Navbar>
    </>
  );
}

export default NavList;

========================================
Home
========================================

import React from "react";
import { Container } from "react-bootstrap";
// import Header from "../components/Header";
// import NavList from "../components/NavList";
import Jumbotron from "../components/Jumbotron";
import Posts from "../components/Posts";
import Footer from "../components/Footer";


export const Home = () => {
  return (
    <Container>
       <div>
       <Jumbotron />
       <Posts />
       <Footer />
      </div>
    </Container>
  );
};

export default Home;

========================================
App
========================================

import React from "react";
// import { Form, Navbar, Card, Button } from "react-bootstrap";
import API from "./utils/API";
import Header from "./components/Header";
import NavList from "./components/NavList";
import Home from "./pages/Home";
import { BrowserRouter as Router} from "react-router-dom";
import "./styles/style.css";

function App() {

  const handleFormSubmit = (event) => {
    event.preventDefault();
    API.searchAreas();
  };

  return (
    <Router>
    <div>
    <header className="masthead">
        <div className="headnav">
          <Header />
          <NavList />
        </div>
    </header>
      <Route to="/" component={Home} />
      <Route exact path="/about" component={About} />
      <Route exact path="/profile" component={Profile} />
    </div> 
    </Router>
  );
}

export default App;

Day 5

Starting on the Recreation API GET request fix today. Found a video
on YouTube that discusses issues using Cross-origin resource sharing
with Axios.

Link: https://www.youtube.com/watch?v=hxyp_LkKDdk

So far the tutorial talks about dozens of developers having the same issue
when trying to make a call to a public API. So maybe the issue is not Mongoose
and internal logic in axios'